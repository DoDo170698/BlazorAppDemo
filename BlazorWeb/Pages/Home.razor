@page "/"
@using BlazorWeb.Models
@using Microsoft.AspNetCore.Components.Web.Extensions
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using System.Text
@using System.Security.Cryptography
@inject IJSRuntime _jsRuntime

<PageTitle>Home</PageTitle>

<h1>Weather Forecasts</h1>


@if (_weatherForecasts != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>TemperatureC</th>
                <th>TemperatureF</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in _weatherForecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}
<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.2.0/crypto-js.min.js" integrity="sha512-a+SUDuwNzXDvz4XrIcXHuCf089/iJAoN4lmrXJg18XnduKK6YlDHNRalv4yd1N40OKI80tFidF+rqTFKGPoWFQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script type="module" src="~/js/decrypt.js"></script>

@code {
    private List<WeatherForecast>? _weatherForecasts;
    private HubConnection? _dataHubConnection;
    private const string _key = "SECRETKEYUSEDSYMMETRICENCRYPTION";
    private const string _iv = "19xj02lop5n9t8aw";


    protected override async Task OnInitializedAsync()
    {
        var apiAddress = "https://10.148.0.2:8080";
        // var apiAddress = "https://localhost:7011";
        var sensorDataUrl = ($"{apiAddress}/weatherHub");
        _dataHubConnection = new HubConnectionBuilder()
                        .WithUrl(sensorDataUrl)
                        .Build();

        await _dataHubConnection.StartAsync();

        string encryptedData = await _dataHubConnection.InvokeAsync<string>("GetWeatherData");
        _weatherForecasts = await DecryptString(encryptedData, _key, _iv); // Thay thế "YourSecretKey" bằng khóa bảo mật thật của bạn

        // Đăng ký sự kiện để cập nhật dữ liệu khi có thay đổi từ SignalR
        _dataHubConnection.On<string>("ReceiveWeatherData", async (data) =>
        {
            _weatherForecasts = await DecryptString(data, _key, _iv); // Thay thế "YourSecretKey" bằng khóa bảo mật thật của bạn
            StateHasChanged();
        });
    }

    private async Task<List<WeatherForecast>> DecryptString(string cipherText, string keyString, string iv)
    {
        var serialized = await _jsRuntime.InvokeAsync<List<WeatherForecast>>("methods.decryptAES", new
        {
            Key = keyString,
            IV = iv,
            encryptedString = cipherText
        });

        return serialized;
    }
}